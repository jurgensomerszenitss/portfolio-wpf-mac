// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using Mdm.App.ViewModels;
using Mdm.MacOS.Assets;

namespace Mdm.MacOS
{
	public partial class UserSettingsViewController : NSViewController
	{
		private NSViewController _presentor;
		private int _syncValue;
		private IUserSettingsViewModel _userSettingsViewModel;

		public NSViewController Presentor
		{
			get { return _presentor; }
			set { _presentor = value; }
		}

		public UserSettingsViewController (IntPtr handle) : base (handle)
		{
		}

		public override async void ViewDidLoad()
		{
			_userSettingsViewModel = MainClass.Container.GetInstance<IUserSettingsViewModel>();
            
			await _userSettingsViewModel.Initialize();

			_fldLastLoginDate.StringValue = _userSettingsViewModel.LastLogin.ToString();
			_fldUserName.StringValue = _userSettingsViewModel.UserName;
			_fldBusinessName.StringValue = _userSettingsViewModel.BusinessName;
			_fldContractDate.StringValue = _userSettingsViewModel.ContractDate.ToString();
			_fldCustomerClassification.StringValue = _userSettingsViewModel.Classification;
			_fldFileLocation.StringValue = _userSettingsViewModel.FileLocation ?? String.Empty;
			_syncValue = _userSettingsViewModel.SyncInterval;
			SetSyncInterval();

			_userSettingsViewModel.PropertyChanged += _userSettingsViewModel_PropertyChanged;

			this.View.WantsLayer = true;
			this.View.Layer.BackgroundColor = Colors.ColorSettingsBackground.CGColor;

			btnLogout.WantsLayer = true;			
			btnLogout.ContentTintColor = Colors.ColorSettingsButtonBorder;
			btnLogout.Layer.CornerRadius = 12;
			btnLogout.Layer.BorderWidth = 1;
			btnLogout.Layer.BorderColor = Colors.ColorSettingsButtonBorder.CGColor;

			btnBrowse.WantsLayer = true; 
			btnBrowse.Layer.CornerRadius = 12;
			btnBrowse.Layer.BorderWidth = 1;
			btnBrowse.Layer.BorderColor = NSColor.White.CGColor;

			_divider1.BorderColor = Colors.ColorSeparator;
			_divider1.BorderType = NSBorderType.LineBorder;
			_divider1.BoxType = NSBoxType.NSBoxCustom;
			_divider1.SetFrameSize(new CoreGraphics.CGSize(432, 1));

			_divider2.BorderColor = Colors.ColorSeparator;
			_divider2.BorderType = NSBorderType.LineBorder;
			_divider2.BoxType = NSBoxType.NSBoxCustom;
			_divider2.SetFrameSize(new CoreGraphics.CGSize(432, 1));

			_divider3.BorderColor = Colors.ColorSeparator;
			_divider3.BorderType = NSBorderType.LineBorder;
			_divider3.BoxType = NSBoxType.NSBoxCustom;
			_divider3.SetFrameSize(new CoreGraphics.CGSize(432, 1));

			SetDefaultToggleButtonStyle(_fldSyncOff);
			SetDefaultToggleButtonStyle(_fldSync5);
			SetDefaultToggleButtonStyle(_fldSync30);
			SetDefaultToggleButtonStyle(_fldSync60);

			btnCancel.WantsLayer = true;
			btnCancel.Layer.CornerRadius = 20;
			btnCancel.Layer.BorderWidth = 1;
			btnCancel.Layer.BorderColor = Colors.ColorSettingsButtonCancel.CGColor;

			btnSave.WantsLayer = true;
			btnSave.Layer.CornerRadius = 20;
			btnSave.Layer.BorderWidth = 1;
			btnSave.Layer.BorderColor = Colors.ColorSettingsButtonSave.CGColor;
			btnSave.Layer.BackgroundColor = Colors.ColorSettingsButtonSave.CGColor;


			base.ViewDidLoad();

		}

		private void SetDefaultToggleButtonStyle(NSButton nSButton)
		{
			nSButton.WantsLayer = true;
			nSButton.Layer.CornerRadius = 12;
			nSButton.Layer.BorderWidth = 1;

			var color = nSButton.State == NSCellStateValue.Off ? Colors.ColorSettingsButtonSync : Colors.ColorSettingsButtonSyncSelected;

			nSButton.Layer.BorderColor = color.CGColor;
			nSButton.ContentTintColor = color;
			 
		}

        private void _userSettingsViewModel_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
             switch(e.PropertyName)
            {
				case nameof(IUserSettingsViewModel.LastLogin): BeginInvokeOnMainThread(() => _fldLastLoginDate.StringValue = _userSettingsViewModel.LastLogin.ToString()); break;
				case nameof(IUserSettingsViewModel.UserName): BeginInvokeOnMainThread(() => _fldUserName.StringValue = _userSettingsViewModel.UserName); break;
				case nameof(IUserSettingsViewModel.BusinessName): BeginInvokeOnMainThread(() => _fldBusinessName.StringValue = _userSettingsViewModel.BusinessName); break;
				case nameof(IUserSettingsViewModel.ContractDate): BeginInvokeOnMainThread(() => _fldContractDate.StringValue = _userSettingsViewModel.ContractDate.ToString()); break;
				case nameof(IUserSettingsViewModel.Classification): BeginInvokeOnMainThread(() => _fldCustomerClassification.StringValue = _userSettingsViewModel.Classification); break;
				case nameof(IUserSettingsViewModel.FileLocation): BeginInvokeOnMainThread(() => _fldFileLocation.StringValue = _userSettingsViewModel.FileLocation); break;
				case nameof(IUserSettingsViewModel.SyncInterval): BeginInvokeOnMainThread(() => SetSyncInterval()); break;
			}
        }

        partial void SelectFolderClicked(NSObject sender)
        {
			var dlg = NSOpenPanel.OpenPanel;
			dlg.CanChooseFiles = false;
			dlg.CanChooseDirectories = true;
			//dlg.AllowedFileTypes = new string[] { "txt", "html", "md", "css" };

			if (dlg.RunModal() == 1)
			{
				// Nab the first file
				var location = dlg.Urls[0];
				_fldFileLocation.StringValue = location.Path ?? String.Empty;
 
			}
		}


        partial void CancelClicked(NSObject sender)
        {
			CloseDialog();
        }

        partial void SaveClicked(NSObject sender)
        {

			_userSettingsViewModel.PropertyChanged -= _userSettingsViewModel_PropertyChanged;
			_userSettingsViewModel.FileLocation = _fldFileLocation.StringValue;
			_userSettingsViewModel.SyncInterval = _syncValue;
			_userSettingsViewModel.SaveCommand.Execute(null);
			_userSettingsViewModel.PropertyChanged += _userSettingsViewModel_PropertyChanged; 
			CloseDialog();
        }

		partial void LogoutClicked(NSObject sender)
		{
			CloseDialog();
			BeginInvokeOnMainThread(() => _userSettingsViewModel.LogoutCommand.Execute(null));
		}

		partial void SyncValueChanged(NSObject sender)
		{
			var check = sender as NSButton;
			_syncValue = int.Parse(check.Tag.ToString());

			_fldSyncOff.State = sender == _fldSyncOff ? NSCellStateValue.On : NSCellStateValue.Off;
			_fldSync5.State = sender == _fldSync5 ? NSCellStateValue.On : NSCellStateValue.Off;
			_fldSync30.State = sender == _fldSync30 ? NSCellStateValue.On : NSCellStateValue.Off;
			_fldSync60.State = sender == _fldSync60 ? NSCellStateValue.On : NSCellStateValue.Off;

			SetDefaultToggleButtonStyle(_fldSyncOff);
			SetDefaultToggleButtonStyle(_fldSync5);
			SetDefaultToggleButtonStyle(_fldSync30);
			SetDefaultToggleButtonStyle(_fldSync60);
		}

		private void CloseDialog()
		{
			BeginInvokeOnMainThread(() => Presentor.DismissViewController(this));
		}

		private void SetSyncInterval()
		{
			_fldSyncOff.State = _userSettingsViewModel.SyncInterval == 0 ? NSCellStateValue.On : NSCellStateValue.Off;
			_fldSync5.State = _userSettingsViewModel.SyncInterval == 5 ? NSCellStateValue.On : NSCellStateValue.Off;
			_fldSync30.State = _userSettingsViewModel.SyncInterval == 30 ? NSCellStateValue.On : NSCellStateValue.Off;
			_fldSync60.State = _userSettingsViewModel.SyncInterval == 60 ? NSCellStateValue.On : NSCellStateValue.Off;
		}

       
    }
}
